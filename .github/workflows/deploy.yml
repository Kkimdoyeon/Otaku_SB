name: CI/CD using github actions & docker

# event trigger
# dev 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      ## JDK setting - github actions에서 사용할 JDK 설정
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## gradlew 파일에 실행 권한을 부여
      - name: Grant execute permission for gradlew
        run:
          chmod +x gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      ## yml 파일 생성
      - name: make application.yml
        if: contains(github.ref, 'dev')
        run: |
          echo "${{ secrets.APPLICATION_YML }}"
          cd ./src/main
          mkdir -p resources
          cd ./resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      ## docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'dev')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.6
        id: deploy-prod
        if: contains(github.ref, 'dev')
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          port: 22
          script: |
            sudo docker ps
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            sudo docker-compose up -d
            sudo docker image prune -f
